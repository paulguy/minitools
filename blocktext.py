#!/usr/bin/env python

from array import array
from itertools import repeat
from sys import argv, stdin

FONT = (
    # ..#.
    # ##..
    # #.#.
    (6, 2, 5, 0),
    # .
    # .
    # .
    (0,),
    # ..#.
    # ..#.
    # #...
    (4, 0, 3, 0),
    # #.#.
    # ....
    # ....
    (1, 0, 1, 0),
    # .####.
    # .#.#..
    # ####..
    (4, 7, 5, 7, 1, 0),
    # ..###.
    # .###..
    # ###...
    (4, 6, 7, 3, 1, 0),
    # #..#..
    # ..#...
    # .#..#.
    (1, 4, 2, 1, 4, 0),
    # .##..
    # ####.
    # .###.
    (4, 7, 7, 6, 0),
    # #.
    # ..
    # ..
    (1, 0),
    # .#.
    # #..
    # .#.
    (2, 5, 0),
    # #..
    # .#.
    # #..
    (5, 2, 0),
    # #..#.
    # .##..
    # #..#.
    (5, 2, 2, 5, 0),
    # .#..
    # ###.
    # .#..
    (2, 7, 2, 0),
    # ...
    # .#.
    # #..
    (4, 2, 0),
    # ....
    # ###.
    # ....
    (4, 4, 4, 0),
    # ..
    # ..
    # #.
    (4, 0, 0),
    # ..#.
    # .#..
    # #...
    (4, 2, 1, 0),
    # ###.
    # #.#.
    # ###.
    (7, 5, 7, 0),
    # .#..
    # .#..
    # .#..
    (0, 0, 7, 0),
    # ##..
    # .##.
    # ###.
    (5, 7, 6, 0),
    # ###.
    # .##.
    # ###.
    (5, 7, 7, 0),
    # #.#.
    # ###.
    # ..#.
    (3, 2, 7, 0),
    # ###.
    # .##.
    # ##..
    (5, 7, 3, 0),
    # .##.
    # ##..
    # ###.
    (6, 7, 5, 0),
    # ###.
    # ..#.
    # ..#.
    (1, 1, 7, 0),
    # .##.
    # ###.
    # ##..
    (6, 7, 3, 0),
    # ###.
    # .##.
    # ##..
    (5, 7, 3, 0),
    # #.
    # ..
    # #.
    (5, 0),
    # #...
    # ..#.
    # .#..
    (1, 4, 2, 0),
    # .##.
    # ##..
    # .##.
    (2, 7, 5, 0),
    # ###.
    # ....
    # ###.
    (5, 5, 5, 0),
    # ##..
    # .##.
    # ##..
    (5, 7, 2, 0),
    # ##..
    # ..#.
    # .#..
    (1, 5, 2, 0),
    # .##..
    # #..#.
    # #.##.
    (6, 1, 5, 7, 0),
    # .#..
    # #.#.
    # ###.
    (6, 5, 6, 0),
    # ##..
    # ###.
    # ###.
    (7, 7, 6, 0),
    # ###.
    # #...
    # ###.
    (7, 5, 5, 0),
    # ##..
    # #.#.
    # ##..
    (7, 5, 2, 0),
    # ###.
    # ##..
    # ###.
    (7, 7, 5, 0),
    # ###.
    # ##..
    # #...
    (7, 3, 1, 0),
    # .#...
    # #..#.
    # .###.
    (2, 5, 4, 6, 0),
    # #.#.
    # ###.
    # #.#.
    (7, 2, 7, 0),
    # ###.
    # .#..
    # ###.
    (5, 7, 5, 0),
    # ##.
    # .#.
    # #..
    (5, 3, 0),
    # #.#.
    # ##..
    # #.#.
    (7, 2, 5, 0),
    # #...
    # #...
    # ###.
    (7, 4, 4, 0),
    # ##.##.
    # #.#.#.
    # #...#.
    (7, 1, 2, 1, 7, 0),
    # ##.#.
    # #.##.
    # #..#.
    (7, 1, 2, 7, 0),
    # .#..
    # #.#.
    # .#..
    (2, 5, 2, 0),
    # ###.
    # ###.
    # #...
    (7, 3, 3, 0),
    # .#..
    # #.#.
    # .##.
    (2, 5, 6, 0),
    # ##..
    # ###.
    # #.#.
    (7, 3, 6, 0),
    # .##.
    # .#..
    # ##..
    (4, 7, 1, 0),
    # ###.
    # .#..
    # .#..
    (1, 7, 1, 0),
    # #.#.
    # #.#.
    # .##.
    (3, 4, 7, 0),
    # #.#.
    # #.#.
    # .#..
    (3, 4, 3, 0),
    # #...#.
    # #.#.#.
    # .#.#..
    (3, 4, 2, 4, 3, 0),
    # #..#.
    # .##..
    # #..#.
    (5, 2, 2, 5, 0),
    # #.#.
    # .#..
    # .#..
    (1, 6, 1, 0),
    # ####..
    # ..#...
    # .####.
    (1, 5, 7, 5, 4, 0),
    # ##.
    # #..
    # ##.
    (7, 5, 0),
    # #...
    # .#..
    # ..#.
    (1, 2, 4, 0),
    # ##.
    # .#.
    # ##.
    (5, 7, 0),
    # .#..
    # #.#.
    # ....
    (2, 1, 2, 0),
    # ..
    # ..
    # ##
    (4, 4),
    # #..
    # .#.
    # ...
    (1, 2, 0),
    # .##.
    # #.#.
    # .##.
    (2, 5, 7, 0),
    # #..
    # ##.
    # ##.
    (7, 6, 0),
    # .##.
    # #...
    # .##.
    (2, 5, 5, 0),
    # .#.
    # ##.
    # ##.
    (6, 7, 0),
    # .##.
    # ###.
    # .##.
    (2, 7, 7, 0),
    # .##.
    # ###.
    # .#..
    (2, 7, 3, 0),
    # ##.
    # .#.
    # #..
    (5, 3, 0),
    # #...
    # ##..
    # #.#.
    (7, 2, 4, 0),
    # ..#.
    # #...
    # #...
    (6, 0, 1, 0),
    # .#.
    # .#.
    # #..
    (4, 3, 0),
    # #...
    # #.#.
    # ###.
    (7, 4, 6, 0),
    # ##.
    # .#.
    # .#.
    (1, 7, 0),
    # ......
    # ####..
    # #.#.#.
    (6, 2, 6, 2, 4, 0),
    # ....
    # ##..
    # #.#.
    (6, 2, 4, 0),
    # ...
    # ##.
    # ##.
    (6, 6, 0),
    # ##.
    # ##.
    # #..
    (7, 3, 0),
    # ##.
    # ##.
    # .#.
    (3, 7, 0),
    # ...
    # ##.
    # #..
    (6, 2, 0),
    # ....
    # .##.
    # ##..
    (4, 6, 2, 0),
    # .#..
    # ###.
    # .##.
    (2, 7, 6, 0),
    # ....
    # #.#.
    # .##.
    (2, 4, 6, 0),
    # ....
    # #.#.
    # .#..
    (2, 4, 2, 0),
    # ......
    # #.#.#.
    # .#.#..
    (2, 4, 2, 4, 2, 0),
    # #.#.
    # .#..
    # #.#.
    (5, 2, 5, 0),
    # #.#.
    # .##.
    # ##..
    (5, 6, 3, 0),
    # ##..
    # .#..
    # .##.
    (1, 7, 4, 0),
    # .#.
    # ##.
    # .#.
    (2, 7, 0),
    # #.
    # #.
    # #.
    (7, 0),
    # #..
    # ##.
    # #..
    (7, 2, 0),
    # .#.#.
    # #.#..
    # .....
    (2, 1, 2, 1, 0)
)

CHARS = ' 🬀🬃🬄🬏🬐🬓▌🬁🬂🬅🬆🬑🬒🬔🬕🬇🬈🬋🬌🬖🬗🬚🬛🬉🬊🬍🬎🬘🬙🬜🬝🬞🬟🬢🬣🬭🬮🬱🬲🬠🬡🬤🬥🬯🬰🬳🬴🬦🬧🬩🬪🬵🬶🬹🬺▐🬨🬫🬬🬷🬸🬻█'

def text_to_block(text):
    gfx = list()
    gfx.append(list())
    line = 0

    for c in text:
        if c == '\n':
            if len(gfx[line]) % 2 == 1:
                gfx[line].append(0)
            gfx.append(list())
            line += 1
        elif ord(c) < ord(' ') or \
           ord(c) > ord('~'):
            gfx[line].extend(FONT[0])
        else:
            gfx[line].extend(FONT[ord(c) - ord(' ') + 1])

    totallen = 0
    for lnum, line in enumerate(gfx):
        totallen += len(line) // 2 + 1
        for num in range(len(line) // 2):
            gfx[lnum][num] = gfx[lnum][num * 2] | (gfx[lnum][num * 2 + 1] << 3)
        gfx[lnum] = gfx[lnum][:len(gfx[lnum]) // 2]
    totallen -= 1

    outtext = array('u', repeat(' ', totallen))
    pos = 0
    for lnum, line in enumerate(gfx):
        for num, val in enumerate(line):
            outtext[pos + num] = CHARS[val]
        if lnum < len(gfx) - 1:
            pos += len(line)
            outtext[pos] = '\n'
            pos += 1

    return outtext.tounicode()

def main():
    if len(argv) > 1:
        print(text_to_block(argv[1]))
    else:
        while True:
            text = stdin.read()
            if len(text) == 0:
                break
            print(text_to_block(text))

if __name__ == '__main__':
    main()
